!obj:pylearn2.train.Train {
  dataset: &train !obj:pylearn2.datasets.mri.MRI {
    which_set: 'train',
    start: 0,
    stop: 611,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [256, 166],
            num_channels: 1,
        },
    layers: [
             !obj:pylearn2.models.mlp.ConvRectifiedLinear {
               layer_name: 'h2',
               output_channels: 96,
               kernel_shape: [5, 5],
               pool_shape: [3, 3],
               pool_stride: [2, 2],
               irange: 0.05,
               max_kernel_norm: 1.9365,
             },
             !obj:pylearn2.models.mlp.ConvRectifiedLinear {
             layer_name: 'h3',
             output_channels: 192,
             kernel_shape: [5, 5],
             pool_shape: [2, 2],
             pool_stride: [1, 1],
             irange: 0.05,
             max_kernel_norm: 1.9365,
             },
             !obj:pylearn2.models.mlp.ConvRectifiedLinear {
             layer_name: 'h4',
             output_channels: 192,
             kernel_shape: [3, 3],
             pool_shape: [2, 2],
             pool_stride: [2, 2],
             irange: 0.05,
             max_kernel_norm: 1.9365,
             },
             !obj:pylearn2.models.mlp.RectifiedLinear {
               layer_name: 'h5',
               irange: 0.05,
               dim: 500,
             },
             !obj:pylearn2.models.mlp.Softmax {
               max_col_norm: 1.9365,
               layer_name: 'y',
               n_classes: 3,
               irange: 0.05
             }
            ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 1,
        learning_rate: 0.1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
        },
        monitoring_dataset:
        {
            'valid': !obj:pylearn2.datasets.mri.MRI {
              which_set: 'train',
              start: 611,
              stop: 661,
            },
            'test': !obj:pylearn2.datasets.mri.MRI {
              which_set: 'train',
              start: 661,
              stop: 711,
            },
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
          input_include_probs: {'h2' : 0.8},
          input_scales: {'h2' : 1.}
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.5,
            N: 10
        },
    },
    extensions:
        [!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
            channel_name: 'valid_y_misclass',
            save_path: "./cnn_brain_ReLU_3l_big.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: 0.99,
        },     
    ],
}
